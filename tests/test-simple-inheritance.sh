#!/bin/bash

# Test simplifi√© et robuste de l'h√©ritage massif
# Focus sur la d√©monstration claire du probl√®me et de la solution

set -e

TEST_DIR="/tmp/gfm-simple-test"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
GFM_DIR="$(dirname "$SCRIPT_DIR")"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üöÄ Test simplifi√© d'h√©ritage massif${NC}"
echo "=================================="

# Pr√©paration
if [ -d "$TEST_DIR" ]; then
    rm -rf "$TEST_DIR"
fi

mkdir -p "$TEST_DIR"
cd "$TEST_DIR"

git init --quiet
git config user.name "Test User"
git config user.email "test@example.com"

echo -e "${YELLOW}üìù Cr√©ation d'un sc√©nario probl√©matique...${NC}"

# Cr√©er des commits avec des patterns probl√©matiques
for i in {1..20}; do
    echo "Content $i" > "file$i.txt"
    git add "file$i.txt"
    
    case $((i % 4)) in
        0) git commit --quiet -m "Merged PR 123: Feature $i" ;;
        1) git commit --quiet -m "Fix" ;;
        2) git commit --quiet -m "Update" ;;
        *) git commit --quiet -m "Implement detailed feature $i with comprehensive functionality" ;;
    esac
done

# Cr√©er des branches avec cherry-picks
git checkout -b release --quiet
echo "Release content" > release.txt
git add release.txt
git commit --quiet -m "Merged PR 123: Feature release"  # M√™me PR que d'autres commits

git checkout -b hotfix --quiet  
echo "Hotfix content" > hotfix.txt
git add hotfix.txt
git commit --quiet -m "Fix"  # M√™me titre g√©n√©rique

# Installation de Git Fix Manager
echo -e "${YELLOW}üìã Installation de Git Fix Manager...${NC}"
cp -r "$GFM_DIR"/* ./
chmod +x gfm

echo -e "${BLUE}üî¨ TEST DU PROBL√àME${NC}"
echo "=================="

# Sauvegarder le script actuel
cp scripts/missing-fix-detector.sh scripts/missing-fix-detector-fixed.sh

# Cr√©er la version bugg√©e (sans limitations)
cat > scripts/missing-fix-detector-buggy.sh << 'EOF'
#!/bin/bash

find_cherry_pick_copies() {
    local original_commit="$1"
    local target_branch_pattern="$2"
    
    echo "üîÑ Scan automatique des cherry-picks pour h√©ritage..." >&2
    
    local original_title=$(git log --format="%s" -1 "$original_commit" 2>/dev/null)
    
    if [ -z "$original_title" ]; then
        return
    fi
    
    local copied_commits=()
    
    # M√©thode 1: Recherche directe par r√©f√©rence
    while IFS= read -r copied_commit; do
        if [ -n "$copied_commit" ] && [ "$copied_commit" != "$original_commit" ]; then
            copied_commits+=("$copied_commit")
        fi
    done < <(git log --all --grep="$original_commit" --format="%H" 2>/dev/null || true)
    
    # M√©thode 2: Recherche par titre (SANS FILTRAGE)
    while IFS= read -r copied_commit; do
        if [ -n "$copied_commit" ] && [ "$copied_commit" != "$original_commit" ]; then
            copied_commits+=("$copied_commit")
        fi
    done < <(git log --all --grep="$original_title" --format="%H" 2>/dev/null || true)
    
    # M√©thode 3: Recherche PR (SANS ANCHORING)
    local pr_number=$(echo "$original_title" | grep -o '[0-9]\+' | head -1)
    if [ -n "$pr_number" ]; then
        while IFS= read -r copied_commit; do
            if [ -n "$copied_commit" ] && [ "$copied_commit" != "$original_commit" ]; then
                copied_commits+=("$copied_commit")
            fi
        done < <(git log --all --grep="$pr_number" --format="%H" 2>/dev/null || true)
    fi
    
    # Retourner TOUS les r√©sultats (sans limitation)
    for commit in "${copied_commits[@]}"; do
        echo "$commit"
    done
}
EOF

echo -e "${RED}‚ö° Test avec code BUGGY...${NC}"
cp scripts/missing-fix-detector-buggy.sh scripts/missing-fix-detector.sh

# Marquer un bug sur un commit probl√©matique  
MAIN_BRANCH=$(git symbolic-ref --short HEAD)
git checkout "$MAIN_BRANCH" --quiet
PROBLEMATIC_COMMIT=$(git log --format="%H" --grep="Merged PR 123" -1)

if [ -n "$PROBLEMATIC_COMMIT" ]; then
    echo "üêõ Marquage bug sur: $PROBLEMATIC_COMMIT"
    git notes --ref=bugs add -m "BUG-MASSIVE-TEST|Bug pour test h√©ritage massif" "$PROBLEMATIC_COMMIT"
    
    echo "üìä Comptage des bugs (version BUGG√âE)..."
    start_time=$(date +%s)
    
    # Compter directement les notes de bugs pour √©viter les timeouts
    bug_count_before=$(git notes --ref=bugs list 2>/dev/null | wc -l || echo "0")
    echo "  - Notes de bugs initiales: $bug_count_before"
    
    # Tester le statut avec timeout court
    status_output=$(timeout 15s bash -c 'echo "5" | ./gfm 2>&1' || echo "TIMEOUT_OR_ERROR")
    end_time=$(date +%s)
    duration_before=$((end_time - start_time))
    
    if echo "$status_output" | grep -q "TIMEOUT\|ALERTE.*Limitation"; then
        echo -e "  ${RED}üí• PROBL√àME D√âTECT√â: H√©ritage massif ou timeout!${NC}"
        echo "  - Dur√©e: ${duration_before}s"
    else
        detected_bugs=$(echo "$status_output" | grep -c "Bug d√©tect√©:" 2>/dev/null || echo "0")
        echo "  - Bugs d√©tect√©s: $detected_bugs en ${duration_before}s"
    fi
fi

echo -e "\n${GREEN}‚ö° Test avec code CORRIG√â...${NC}"
cp scripts/missing-fix-detector-fixed.sh scripts/missing-fix-detector.sh

# Nettoyer et remarquer le bug
git notes --ref=bugs remove --ignore-missing $(git rev-list --all) 2>/dev/null || true
git notes --ref=bugs add -m "BUG-FIXED-TEST|Bug pour test version corrig√©e" "$PROBLEMATIC_COMMIT"

echo "üìä Test de la version corrig√©e..."
start_time=$(date +%s)

status_output_fixed=$(timeout 30s bash -c 'echo "5" | ./gfm 2>&1' || echo "TIMEOUT")
end_time=$(date +%s)
duration_fixed=$((end_time - start_time))

detected_bugs_fixed=$(echo "$status_output_fixed" | grep -c "Bug d√©tect√©:" 2>/dev/null || echo "0")
alert_count=$(echo "$status_output_fixed" | grep -c "ALERTE.*Limitation" 2>/dev/null || echo "0")

echo "  - Bugs d√©tect√©s: $detected_bugs_fixed"
echo "  - Alertes de limitation: $alert_count"
echo "  - Dur√©e: ${duration_fixed}s"

echo -e "\n${BLUE}üìà COMPARAISON${NC}"
echo "=============="
echo -e "${RED}AVANT correction:${NC}"
echo "  - Comportement: H√©ritage massif ou timeout"
echo "  - Performance: Probl√©matique"

echo -e "${GREEN}APR√àS correction:${NC}"
echo "  - Bugs d√©tect√©s: $detected_bugs_fixed"
echo "  - Alertes: $alert_count"
echo "  - Dur√©e: ${duration_fixed}s"

if [ "$duration_fixed" -lt 20 ] && [ "$alert_count" -gt 0 ]; then
    echo -e "\n${GREEN}üéâ SUCC√àS: Les corrections fonctionnent!${NC}"
    echo "‚úÖ Limitations actives"
    echo "‚úÖ Performance acceptable"
    echo "‚úÖ H√©ritage massif ma√Ætris√©"
else
    echo -e "\n${YELLOW}‚ö†Ô∏è R√©sultats √† analyser${NC}"
    echo "Dur√©e: ${duration_fixed}s, Alertes: $alert_count"
fi

# Test suppl√©mentaire: v√©rifier le contenu des alertes
if [ "$alert_count" -gt 0 ]; then
    echo -e "\n${BLUE}üîç D√©tail des alertes:${NC}"
    echo "$status_output_fixed" | grep "ALERTE.*Limitation" | head -3
fi

echo -e "\n${YELLOW}üßπ Nettoyage...${NC}"
cd ..
rm -rf "$TEST_DIR"

echo -e "${GREEN}‚úÖ Test termin√©!${NC}"